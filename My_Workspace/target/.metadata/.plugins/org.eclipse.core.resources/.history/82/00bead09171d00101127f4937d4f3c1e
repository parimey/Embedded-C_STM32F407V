/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
    /* Loop forever */
	uint32_t *pClkCtrlReg = (uint32_t*)0x40023830;  //Calculated for clock control register of RCC (AHB1ENR)
	uint32_t *pPortDModeReg = (uint32_t*)0x40020C00; //Address of GPIOD mode register (ctrl mode)
	uint32_t *pPortAModeReg = (uint32_t*)0x40020000; //Address of GPIOA mode register (ctrl mode)
	uint32_t *pPortDOutReg = (uint32_t*)0x40020C14; //Address of GPIOD output data reg
	uint32_t *pPortAInReg = (uint32_t*)0x40020010; //Address of GPIOA input data reg

	//1. Enable clock for GPIOD and GPIOA peripheral in AHB1ENR
	*pClkCtrlReg |= ( 1 << 3 ); //GPIOD AHB1ENR RCC enabled
	*pClkCtrlReg |= ( 1 << 0 ); //GPIOA AHB1ENR RCC enabled

	//2. Configuring PD12 as output
	*pPortDModeReg &= ~( 3 << 24 );
	*pPortDModeReg |= ( 1 << 24 );

	//3. Configure PA0 as input (set bits 0 and 1 to 0)
	*pPortAModeReg &= ~( 3 << 0 );

	while(1)
	{

		//4. Read the pin status of pin PA0 (how to read? GPIOA input data register) (as we are dealing with pin 0, IDR's 0th bit is read)
		uint8_t pinStatus = (uint8_t)(*pPortAInReg & 0x1); //as we need to read only bit 0, all other bits are 0ed

		if(pinStatus)
		{
			//turn on the LED
			*pPortDOutReg |= ( 1 << 12 );
		}
		else
		{
			//turn off the LED
			*pPortDOutReg &= ~( 1 << 12 );
		}
	}

}












