
008Pin_Read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000018c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000314  0800031c  0000131c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000314  08000314  0000131c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000314  08000314  0000131c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000314  0800031c  0000131c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000314  08000314  00001314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000318  08000318  00001318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000131c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000131c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000015e  00000000  00000000  00001346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000a0  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00001548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000002d  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001b44  00000000  00000000  000015bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000005b1  00000000  00000000  00003101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000774e  00000000  00000000  000036b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000ae00  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  0000ae44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  0000ae9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080002fc 	.word	0x080002fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080002fc 	.word	0x080002fc

080001c8 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
    /* Loop forever */
	uint32_t *pClkCtrlReg = (uint32_t*)0x40023830;  //Calculated for clock control register of RCC (AHB1ENR)
 80001ce:	4b1f      	ldr	r3, [pc, #124]	@ (800024c <main+0x84>)
 80001d0:	617b      	str	r3, [r7, #20]
	uint32_t *pPortDModeReg = (uint32_t*)0x40020C00; //Address of GPIOD mode register (ctrl mode)
 80001d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000250 <main+0x88>)
 80001d4:	613b      	str	r3, [r7, #16]
	uint32_t *pPortAModeReg = (uint32_t*)0x40020000; //Address of GPIOA mode register (ctrl mode)
 80001d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000254 <main+0x8c>)
 80001d8:	60fb      	str	r3, [r7, #12]
	uint32_t *pPortDOutReg = (uint32_t*)0x40020C14; //Address of GPIOD output data reg
 80001da:	4b1f      	ldr	r3, [pc, #124]	@ (8000258 <main+0x90>)
 80001dc:	60bb      	str	r3, [r7, #8]
	uint32_t *pPortAInReg = (uint32_t*)0x40020010; //Address of GPIOA input data reg
 80001de:	4b1f      	ldr	r3, [pc, #124]	@ (800025c <main+0x94>)
 80001e0:	607b      	str	r3, [r7, #4]

	//1. Enable clock for GPIOD and GPIOA peripheral in AHB1ENR
	*pClkCtrlReg |= ( 1 << 3 ); //GPIOD AHB1ENR RCC enabled
 80001e2:	697b      	ldr	r3, [r7, #20]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f043 0208 	orr.w	r2, r3, #8
 80001ea:	697b      	ldr	r3, [r7, #20]
 80001ec:	601a      	str	r2, [r3, #0]
	*pClkCtrlReg |= ( 1 << 0 ); //GPIOA AHB1ENR RCC enabled
 80001ee:	697b      	ldr	r3, [r7, #20]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f043 0201 	orr.w	r2, r3, #1
 80001f6:	697b      	ldr	r3, [r7, #20]
 80001f8:	601a      	str	r2, [r3, #0]

	//2. Configuring PD12 as output
	*pPortDModeReg &= ~( 3 << 24 );
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8000202:	693b      	ldr	r3, [r7, #16]
 8000204:	601a      	str	r2, [r3, #0]
	*pPortDModeReg |= ( 1 << 24 );
 8000206:	693b      	ldr	r3, [r7, #16]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800020e:	693b      	ldr	r3, [r7, #16]
 8000210:	601a      	str	r2, [r3, #0]

	//3. Configure PA0 as input (set bits 0 and 1 to 0)
	*pPortAModeReg &= ~( 3 << 0 );
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f023 0203 	bic.w	r2, r3, #3
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	601a      	str	r2, [r3, #0]

	while(1)
	{

		//4. Read the pin status of pin PA0 (how to read? GPIOA input data register) (as we are dealing with pin 0, IDR's 0th bit is read)
		uint8_t pinStatus = (uint8_t)(*pPortAInReg & 0x1); //as we need to read only bit 0, all other bits are 0ed
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	b2db      	uxtb	r3, r3
 8000224:	f003 0301 	and.w	r3, r3, #1
 8000228:	70fb      	strb	r3, [r7, #3]

		if(pinStatus)
 800022a:	78fb      	ldrb	r3, [r7, #3]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d006      	beq.n	800023e <main+0x76>
		{
			//turn on the LED
			*pPortDOutReg |= ( 1 << 12 );
 8000230:	68bb      	ldr	r3, [r7, #8]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	e7ef      	b.n	800021e <main+0x56>
		}
		else
		{
			//turn off the LED
			*pPortDOutReg &= ~( 1 << 12 );
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	601a      	str	r2, [r3, #0]
	{
 800024a:	e7e8      	b.n	800021e <main+0x56>
 800024c:	40023830 	.word	0x40023830
 8000250:	40020c00 	.word	0x40020c00
 8000254:	40020000 	.word	0x40020000
 8000258:	40020c14 	.word	0x40020c14
 800025c:	40020010 	.word	0x40020010

08000260 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000260:	480d      	ldr	r0, [pc, #52]	@ (8000298 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000262:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000264:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000268:	480c      	ldr	r0, [pc, #48]	@ (800029c <LoopForever+0x6>)
  ldr r1, =_edata
 800026a:	490d      	ldr	r1, [pc, #52]	@ (80002a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800026c:	4a0d      	ldr	r2, [pc, #52]	@ (80002a4 <LoopForever+0xe>)
  movs r3, #0
 800026e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000270:	e002      	b.n	8000278 <LoopCopyDataInit>

08000272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000276:	3304      	adds	r3, #4

08000278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800027a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800027c:	d3f9      	bcc.n	8000272 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800027e:	4a0a      	ldr	r2, [pc, #40]	@ (80002a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000280:	4c0a      	ldr	r4, [pc, #40]	@ (80002ac <LoopForever+0x16>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000284:	e001      	b.n	800028a <LoopFillZerobss>

08000286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000288:	3204      	adds	r2, #4

0800028a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800028a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800028c:	d3fb      	bcc.n	8000286 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800028e:	f000 f811 	bl	80002b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000292:	f7ff ff99 	bl	80001c8 <main>

08000296 <LoopForever>:

LoopForever:
  b LoopForever
 8000296:	e7fe      	b.n	8000296 <LoopForever>
  ldr   r0, =_estack
 8000298:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800029c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002a0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a4:	0800031c 	.word	0x0800031c
  ldr r2, =_sbss
 80002a8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ac:	2000001c 	.word	0x2000001c

080002b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002b0:	e7fe      	b.n	80002b0 <ADC_IRQHandler>
	...

080002b4 <__libc_init_array>:
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	4d0d      	ldr	r5, [pc, #52]	@ (80002ec <__libc_init_array+0x38>)
 80002b8:	4c0d      	ldr	r4, [pc, #52]	@ (80002f0 <__libc_init_array+0x3c>)
 80002ba:	1b64      	subs	r4, r4, r5
 80002bc:	10a4      	asrs	r4, r4, #2
 80002be:	2600      	movs	r6, #0
 80002c0:	42a6      	cmp	r6, r4
 80002c2:	d109      	bne.n	80002d8 <__libc_init_array+0x24>
 80002c4:	4d0b      	ldr	r5, [pc, #44]	@ (80002f4 <__libc_init_array+0x40>)
 80002c6:	4c0c      	ldr	r4, [pc, #48]	@ (80002f8 <__libc_init_array+0x44>)
 80002c8:	f000 f818 	bl	80002fc <_init>
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	10a4      	asrs	r4, r4, #2
 80002d0:	2600      	movs	r6, #0
 80002d2:	42a6      	cmp	r6, r4
 80002d4:	d105      	bne.n	80002e2 <__libc_init_array+0x2e>
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002dc:	4798      	blx	r3
 80002de:	3601      	adds	r6, #1
 80002e0:	e7ee      	b.n	80002c0 <__libc_init_array+0xc>
 80002e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e6:	4798      	blx	r3
 80002e8:	3601      	adds	r6, #1
 80002ea:	e7f2      	b.n	80002d2 <__libc_init_array+0x1e>
 80002ec:	08000314 	.word	0x08000314
 80002f0:	08000314 	.word	0x08000314
 80002f4:	08000314 	.word	0x08000314
 80002f8:	08000318 	.word	0x08000318

080002fc <_init>:
 80002fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fe:	bf00      	nop
 8000300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000302:	bc08      	pop	{r3}
 8000304:	469e      	mov	lr, r3
 8000306:	4770      	bx	lr

08000308 <_fini>:
 8000308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030a:	bf00      	nop
 800030c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030e:	bc08      	pop	{r3}
 8000310:	469e      	mov	lr, r3
 8000312:	4770      	bx	lr
